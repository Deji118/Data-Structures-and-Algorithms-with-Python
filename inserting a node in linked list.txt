#inserting a node at the head or before prev takes o(1) times while inserting at the tail takes O(n) times because of the loop.
class Node:
  def __init__(self,data=None,next=None):
    self.data=data#
    self.next=next

class linkedlist:
  def __init__(self):
    self.head=None

  def printList(self): 
    temp = self.head 
        
    while temp : 
      print(temp.data, end="->") 
      temp = temp.next
  def insert(self,new_data):
    new_node=Node(new_data)
    new_node.next=self.head
    self.head=new_node
  def insert2(self,prev,new_data):
    new_node=Node(new_data)
    if prev is None:
      print('the given previous node must be in linkedlist')
      return
    new_node=Node(new_data)
    #new_node.next=prev.next
    prev.next=new_node
  def append(self,new_data):
    new_node=Node(new_data)
    if self.head is None:
      self.head=new_node
      return
    last=self.head
    while(last.next):
      last=last.next
    last.next=new_node
  def printlist(self):
    temp=self.head
    while temp:
      print(temp.data)
      temp=temp.next




if __name__ =='__main__':
    # Start with the empty list 
    llist = linkedlist() 
  
    # Insert 6.  So linked list becomes 6->None 
    llist.insert(6) 
  
    # Insert 7 at the beginning. So linked list becomes 7->6->None 
    llist.insert2(llist.head.next, 8); 
  
    # Insert 1 at the beginning. So linked list becomes 1->7->6->None 
    llist.insert(1); 
  
    # Insert 4 at the end. So linked list becomes 1->7->6->4->None 
    llist.append(4) 
  
    # Insert 8, after 7. So linked list becomes 1 -> 7-> 8-> 6-> 4-> None 
    llist.insert(8) 
  
    print ('Created linked list is:',)
    llist.printList() 

    


