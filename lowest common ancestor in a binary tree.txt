
# Python program to find LCA of n1 and n2 using one 
# traversal of Binary tree '
# Time Complexity: Time complexity of the above solution is O(n) as the method does a simple tree traversal in bottom up fashion.
Note that the above method assumes that keys are present in Binary Tree. If one key is present and other is absent, then it returns the present key as LCA (Ideally should have returned NULL).
We can extend this method to handle all cases by passing two boolean variables v1 and v2. v1 is set as true when n1 is present in tree and v2 is set as true if n2 is present in tree.
  
# A binary tree node 
class Node: 
      
    # Constructor to create a new tree node 
    def __init__(self, key): 
        self.key = key  
        self.left = None
        self.right = None
      
# This function returns pointer to LCA of two given 
# values n1 and n2 
# This function assumes that n1 and n2 are present in 
# Binary Tree 
def findLCA(root, n1, n2): 
      
    # Base Case 
    if root is None: 
        return None
  
    # If either n1 or n2 matches with root's key, report 
    #  the presence by returning root (Note that if a key is 
    #  ancestor of other, then the ancestor key becomes LCA 
    if root.key == n1 or root.key == n2: 
        return root  
  
    # Look for keys in left and right subtrees 
    left_lca = findLCA(root.left, n1, n2)  
    right_lca = findLCA(root.right, n1, n2) 
  
    # If both of the above calls return Non-NULL, then one key 
    # is present in once subtree and other is present in other, 
    # So this node is the LCA 
    if left_lca and right_lca: 
        return root  
  
    # Otherwise check if left subtree or right subtree is LCA 
    return left_lca if left_lca is not None else right_lca 
  
  
# Driver program to test above function 
  
# Let us create a binary tree given in the above example 
root = Node(1) 
root.left = Node(2) 
root.right = Node(3) 
root.left.left = Node(4) 
root.left.right = Node(5) 
root.right.left = Node(6) 
root.right.right = Node(7) 
print "LCA(4,5) = ", findLCA(root, 4, 5).key 
print "LCA(4,6) = ", findLCA(root, 4, 6).key 
print "LCA(3,4) = ", findLCA(root, 3, 4).key 
print "LCA(2,4) = ", findLCA(root, 2, 4).key 
  
# This code is contributed by Nikhil Kumar Singh(nickzuck_007
class Node:
  def __init__(self,data=None,right=None,left=None):
    self.data=data
    self.left=left
    self.right=right

def findlca(root,n1,n2):
    if root is None:
        return None
    if (root.data==n1 or root.data==n2):
        return root
    leftlca=findlca(root.left,n1,n2)
    rightlca=findlca(root.right,n1,n2)
    if leftlca is not None and rightlca is not None:
        return root
    return leftlca if leftlca is not None else rightlca

root = Node(1) 
root.left = Node(2) 
root.right = Node(3) 
root.left.left = Node(4) 
root.left.right = Node(5) 
root.right.left = Node(6) 
root.right.right = Node(7) 
root.right.right.right=Node(8)
print ("LCA(4,5) = ", findlca(root, 4, 5).data)
print ("LCA(4,6) = ", findlca(root, 4, 6).data)
print ("LCA(3,4) = ", findlca(root, 3, 4).data)
print ("LCA(7,8) = ", findlca(root, 7, 8).data)
  
    


