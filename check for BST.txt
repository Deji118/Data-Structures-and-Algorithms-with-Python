
# Python program to check if a binary tree is bst or not 
import math  
INT_MAX=math.inf
INT_MIN=-math.inf
#time complexity 0(n), space complexity0(1)
INT_MAX=float('inf')


INT_MIN=float('-inf')
# A binary tree node 
class Node: 
  
    # Constructor to create a new node 
    def __init__(self, data): 
        self.data = data  
        self.left = None
        self.right = None
  
  

# Return true if the given tree is a BST and its values 
# >= min and <= max 
def isBSTUtil(node, mini, maxi): 
      
    # An empty tree is BST 
    if node is None: 
        return True
  
    # False if this node violates min/max constraint 
    if node.data < mini or node.data > maxi: 
        return False
  
    # Otherwise check the subtrees recursively 
    # tightening the min or max constraint 
    return (isBSTUtil(node.left, mini, node.data -1) and
          isBSTUtil(node.right, node.data+1, maxi)) 
# Returns true if the given tree is a binary search tree 
# (efficient version) 
def isBST(node): 
    return (isBSTUtil(node, INT_MIN, INT_MAX)) 
   
# Driver program to test above function 
root = Node(4) 
root.left = Node(2) 
root.right = Node(5) 
root.left.left = Node(1) 
root.left.right = Node(3) 
  
if (isBST(root)): 
    print ("Is BST")
else: 
    print ("Not a BST")





maxi=float('inf')
mini=float('-inf')
class Node:
	def __init__(self,data):
		self.data=data
		self.left=None
		self.right=None
def isbst(node,mini,maxi):
	if node is None:
		return True
	if node.data<mini or node.data>maxi:
		return False
	return (isbst(node.left,mini,node.data-1) and isbst(node.right,node.data+1, maxi))
root =Node(4)
root.left=Node(2)
root.right=Node(5)
root.left.left=Node(1)
root.left.right=Node(3)
if (isbst(root,mini,maxi)):
	print("is BST")
else:
	print('not a BST.')
  

